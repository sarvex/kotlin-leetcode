internal class UnionFind(n: Int) {
  private val p = IntArray(n)
  private val size = IntArray(n)

  init {
    for (i in 0 until n) {
      p[i] = i
      size[i] = 1
    }
  }

  fun find(x: Int): Int {
    if (p[x] != x) {
      p[x] = find(p[x])
    }
    return p[x]
  }

  fun union(a: Int, b: Int): Boolean {
    val pa = find(a)
    val pb = find(b)
    if (pa == pb) {
      return false
    }
    if (size[pa] > size[pb]) {
      p[pb] = pa
      size[pa] += size[pb]
    } else {
      p[pa] = pb
      size[pb] += size[pa]
    }
    return true
  }

  fun size(root: Int): Int {
    return size[root]
  }
}

internal class Solution {
  fun minMalwareSpread(graph: Array<IntArray>, initial: IntArray): Int {
    val n = graph.size
    val s = BooleanArray(n)
    for (i in initial) {
      s[i] = true
    }
    val uf = UnionFind(n)
    for (i in 0 until n) {
      if (!s[i]) {
        for (j in i + 1 until n) {
          if (graph[i][j] == 1 && !s[j]) {
            uf.union(i, j)
          }
        }
      }
    }
    val g: Array<Set<Int>> = arrayOfNulls(n)
    Arrays.setAll(g) { k -> HashSet() }
    val cnt = IntArray(n)
    for (i in initial) {
      for (j in 0 until n) {
        if (!s[j] && graph[i][j] == 1) {
          g[i].add(uf.find(j))
        }
      }
      for (root in g[i]) {
        ++cnt[root]
      }
    }
    var ans = 0
    var mx = -1
    for (i in initial) {
      var t = 0
      for (root in g[i]) {
        if (cnt[root] == 1) {
          t += uf.size(root)
        }
      }
      if (t > mx || (t == mx && i < ans)) {
        ans = i
        mx = t
      }
    }
    return ans
  }
}
