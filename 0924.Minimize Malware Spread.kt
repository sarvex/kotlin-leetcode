internal class UnionFind(n: Int) {
  private val p = IntArray(n)
  private val size = IntArray(n)

  init {
    for (i in 0 until n) {
      p[i] = i
      size[i] = 1
    }
  }

  fun find(x: Int): Int {
    if (p[x] != x) {
      p[x] = find(p[x])
    }
    return p[x]
  }

  fun union(a: Int, b: Int): Boolean {
    val pa = find(a)
    val pb = find(b)
    if (pa == pb) {
      return false
    }
    if (size[pa] > size[pb]) {
      p[pb] = pa
      size[pa] += size[pb]
    } else {
      p[pa] = pb
      size[pb] += size[pa]
    }
    return true
  }

  fun size(root: Int): Int {
    return size[root]
  }
}

internal class Solution {
  fun minMalwareSpread(graph: Array<IntArray>, initial: IntArray): Int {
    val n = graph.size
    val uf = UnionFind(n)
    for (i in 0 until n) {
      for (j in i + 1 until n) {
        if (graph[i][j] == 1) {
          uf.union(i, j)
        }
      }
    }
    var ans = n
    var mi = n
    var mx = 0
    val cnt = IntArray(n)
    for (x in initial) {
      ++cnt[uf.find(x)]
      mi = min(mi, x)
    }

    for (x in initial) {
      val root = uf.find(x)
      if (cnt[root] == 1) {
        val sz = uf.size(root)
        if (sz > mx || (sz == mx && x < ans)) {
          ans = x
          mx = sz
        }
      }
    }
    return if (ans == n) mi else ans
  }
}
